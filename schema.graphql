"""
A collection of posts, used to organize the nav header
"""
type Category {
  """
  The children categories that appear nested under this one in the nav header
  """
  children: [Category!]

  """
  When this object was added to the database
  """
  createdAt: ISO8601DateTime!

  """
  URL of image to show at the top of the page
  """
  headerImage: String

  """
  Unique database ID
  """
  id: ID!

  """
  Contents of the category's page as Markdown
  """
  markdown: String

  """
  Name as it should appear in the nav header
  """
  name: String

  """
  Order in which to show categories within nav header. Lowest number appears first.
  """
  order: Int

  """
  The parent category. nil if this category should appear at the top-level nav header.
  """
  parent: Category

  """
  The posts to show under this category
  """
  posts: [Post!]

  """
  Whether this category should be visible to non-admin users
  """
  published: Boolean

  """
  The slug to use in the URL to this category
  """
  slug: String!

  """
  Subtitle on the category's page
  """
  subtitle: String

  """
  Summary to appear in list on parent category's page
  """
  summary: String

  """
  Title on the header of the category's page
  """
  title: String

  """
  When this object was last updated in the database
  """
  updatedAt: ISO8601DateTime!
}

"""
Attributes that need to be set to create or update a category
"""
input CategoryInput {
  """
  Contents of the category's page as Markdown
  """
  markdown: String!

  """
  Name as it should appear in the nav header
  """
  name: String!

  """
  Order in which to show categories within nav header. Lowest number appears first.
  """
  order: Int!

  """
  ID of the parent category. nil if this category should appear at the top-level nav header.
  """
  parentId: ID

  """
  Whether this category should be visible to non-admin users
  """
  published: Boolean!

  """
  The slug to use in the URL to this category
  """
  slug: String!

  """
  Subtitle on the category's page
  """
  subtitle: String!

  """
  Summary to appear in list on parent category's page
  """
  summary: String!

  """
  Title on the header of the category's page
  """
  title: String!
}

"""
Autogenerated input type of CreateCategory
"""
input CreateCategoryInput {
  """
  The category to create
  """
  categoryAttributes: CategoryInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCategory.
"""
type CreateCategoryPayload {
  """
  The category that was created. Null if there were errors.
  """
  category: Category

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If non-empty, contains descriptions of errors that prevented the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CreatePost
"""
input CreatePostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The post to create
  """
  postAttributes: PostInput!
}

"""
Autogenerated return type of CreatePost.
"""
type CreatePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If non-empty, contains descriptions of errors that prevented the mutation.
  """
  errors: [String!]!

  """
  The post that was created. Null if there were errors.
  """
  post: Post
}

"""
Autogenerated input type of DeleteCategoryAndChildren
"""
input DeleteCategoryAndChildrenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the category to delete
  """
  id: ID!
}

"""
Autogenerated return type of DeleteCategoryAndChildren.
"""
type DeleteCategoryAndChildrenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If non-empty, contains descriptions of errors that prevented the mutation.
  """
  errors: [String!]!

  """
  Indicates whether the deletion was performed
  """
  successful: Boolean!
}

"""
Autogenerated input type of DeletePost
"""
input DeletePostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the post to delete
  """
  id: ID!
}

"""
Autogenerated return type of DeletePost.
"""
type DeletePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If non-empty, contains descriptions of errors that prevented the mutation.
  """
  errors: [String!]!

  """
  Indicates whether the deletion was performed
  """
  successful: Boolean!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Mutation {
  """
  Creates a category
  """
  createCategory(
    """
    Parameters for CreateCategory
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """
  Creates a post
  """
  createPost(
    """
    Parameters for CreatePost
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """
  Deletes a category, its posts, its children categories, and their children and posts
  """
  deleteCategoryAndChildren(
    """
    Parameters for DeleteCategoryAndChildren
    """
    input: DeleteCategoryAndChildrenInput!
  ): DeleteCategoryAndChildrenPayload

  """
  Deletes a post
  """
  deletePost(
    """
    Parameters for DeletePost
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """
  Updates a category
  """
  updateCategory(
    """
    Parameters for UpdateCategory
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """
  Updates a post
  """
  updatePost(
    """
    Parameters for UpdatePost
    """
    input: UpdatePostInput!
  ): UpdatePostPayload
}

"""
A blog post
"""
type Post {
  """
  The user who wrote the post
  """
  author: User!

  """
  The category under which this post will appear
  """
  category: Category!

  """
  When this object was added to the database
  """
  createdAt: ISO8601DateTime!

  """
  URL of image to show at the top of the page
  """
  headerImage: String

  """
  Unique database ID
  """
  id: ID!

  """
  Contents of the post as Markdown
  """
  markdown: String

  """
  Order in which to show posts within a category. Lowest number appears first.
  """
  order: Int

  """
  Whether this post should be visible to non-admin users
  """
  published: Boolean

  """
  The slug to use in the URL to this post
  """
  slug: String!

  """
  Subtitle of the post
  """
  subtitle: String

  """
  Summary to appear in list on category page
  """
  summary: String

  """
  Title of the post
  """
  title: String

  """
  When this object was last updated in the database
  """
  updatedAt: ISO8601DateTime!
}

"""
Attributes that need to be set to create or update a post]
"""
input PostInput {
  """
  ID of the category under which this post will appear
  """
  categoryId: ID!

  """
  Contents of the post as Markdown
  """
  markdown: String!

  """
  Order in which to show posts within a category. Lowest number appears first.
  """
  order: Int!

  """
  Whether this post should be visible to non-admin users
  """
  published: Boolean!

  """
  The slug to use in the URL to this post
  """
  slug: String!

  """
  Subtitle of the post
  """
  subtitle: String!

  """
  Summary to appear in list on category page
  """
  summary: String!

  """
  Title of the post
  """
  title: String!
}

type Query {
  """
  Fetches all Categories
  """
  categories(
    """
    whether to include categories that have not yet been published
    """
    includeUnpublished: Boolean = false
  ): [Category!]!

  """
  Fetches a category by its ID.
  """
  categoryById(
    """
    ID to query
    """
    id: ID!

    """
    whether to include categories that have not yet been published
    """
    includeUnpublished: Boolean = false
  ): Category

  """
  Fetches a category by its URL slug.
  """
  categoryBySlug(
    """
    whether to include categories that have not yet been published
    """
    includeUnpublished: Boolean = false

    """
    the slug to look up
    """
    slug: String!
  ): Category

  """
  Fetches a Post by ID
  """
  postById(
    """
    ID to query
    """
    id: ID!

    """
    whether to include categories and posts that have not yet been published
    """
    includeUnpublished: Boolean = false
  ): Post

  """
  Fetches a Post by URL slug
  """
  postBySlug(
    """
    the slug of the post's category
    """
    categorySlug: String!

    """
    whether to include categories and posts that have not yet been published
    """
    includeUnpublished: Boolean = false

    """
    the post's slug
    """
    postSlug: String!
  ): Post

  """
  Fetches all Posts that belong to a Category
  """
  postsByCategory(
    """
    ID of the category to query
    """
    categoryId: ID!

    """
    whether to include categories and posts that have not yet been published
    """
    includeUnpublished: Boolean = false
  ): [Post!]

  """
  Fetches a user by ID
  """
  userById(
    """
    ID to query
    """
    id: ID!
  ): User

  """
  Fetches a user by login
  """
  userByLogin(
    """
    login to look up
    """
    login: String!
  ): User
}

"""
Autogenerated input type of UpdateCategory
"""
input UpdateCategoryInput {
  """
  The category to update
  """
  categoryAttributes: CategoryInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the category to update
  """
  id: ID!
}

"""
Autogenerated return type of UpdateCategory.
"""
type UpdateCategoryPayload {
  """
  The category that was updated. Null if there were errors.
  """
  category: Category

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If non-empty, contains descriptions of errors that prevented the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UpdatePost
"""
input UpdatePostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the post to update
  """
  id: ID!

  """
  The post to update
  """
  postAttributes: PostInput!
}

"""
Autogenerated return type of UpdatePost.
"""
type UpdatePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If non-empty, contains descriptions of errors that prevented the mutation.
  """
  errors: [String!]!

  """
  The post that was updated. Null if there were errors.
  """
  post: Post
}

"""
A user who maintains the website
"""
type User {
  """
  Whether this user can write posts
  """
  admin: Boolean!

  """
  When this object was added to the database
  """
  createdAt: ISO8601DateTime!

  """
  Unique database ID
  """
  id: ID!

  """
  Username used for logging in
  """
  login: String

  """
  Full name as it should appear under posts
  """
  name: String

  """
  The posts created by this user
  """
  posts: [Post!]

  """
  When this object was last updated in the database
  """
  updatedAt: ISO8601DateTime!
}
