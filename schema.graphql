"""
Autogenerated input type of CreatePost
"""
input CreatePostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The post to create
  """
  postAttributes: PostInput!
}

"""
Autogenerated return type of CreatePost.
"""
type CreatePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If non-empty, contains descriptions of errors that prevented the mutation.
  """
  errors: [String!]!

  """
  The post that was created. Null if there were errors.
  """
  post: Post
}

"""
Autogenerated input type of DeletePostAndChildren
"""
input DeletePostAndChildrenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the post to delete
  """
  id: ID!
}

"""
Autogenerated return type of DeletePostAndChildren.
"""
type DeletePostAndChildrenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If non-empty, contains descriptions of errors that prevented the mutation.
  """
  errors: [String!]!

  """
  Indicates whether the deletion was performed
  """
  successful: Boolean!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Mutation {
  """
  Creates a post
  """
  createPost(
    """
    Parameters for CreatePost
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """
  Deletes a post, its children post, and their children and posts
  """
  deletePostAndChildren(
    """
    Parameters for DeletePostAndChildren
    """
    input: DeletePostAndChildrenInput!
  ): DeletePostAndChildrenPayload

  """
  Updates a post
  """
  updatePost(
    """
    Parameters for UpdatePost
    """
    input: UpdatePostInput!
  ): UpdatePostPayload
}

"""
A blog post
"""
type Post {
  """
  The user who wrote the post
  """
  author: User!

  """
  The posts that appear under this one
  """
  children: [Post!]!

  """
  When this object was added to the database
  """
  createdAt: ISO8601DateTime!

  """
  URL of image to show at the top of the page
  """
  headerImage: String

  """
  Unique database ID
  """
  id: ID!

  """
  Contents of the post as Markdown
  """
  markdown: String

  """
  Order in which to show posts within a category. Lowest number appears first.
  """
  order: Int

  """
  The post under which this post will appear. Null if it's a top-level post.
  """
  parent: Post!

  """
  Whether this post should be visible to non-admin users
  """
  published: Boolean

  """
  The slug to use in the URL to this post
  """
  slug: String!

  """
  Subtitle of the post
  """
  subtitle: String

  """
  Summary to appear in list on category page
  """
  summary: String

  """
  Title of the post
  """
  title: String

  """
  When this object was last updated in the database
  """
  updatedAt: ISO8601DateTime!
}

"""
Attributes that need to be set to create or update a post]
"""
input PostInput {
  """
  Contents of the post as Markdown
  """
  markdown: String!

  """
  Order in which to show posts within a category. Lowest number appears first.
  """
  order: Int!

  """
  ID of the post under which this post will appear. Null if it's a top-level post.
  """
  parentId: ID

  """
  Whether this post should be visible to non-admin users
  """
  published: Boolean!

  """
  The slug to use in the URL to this post
  """
  slug: String!

  """
  Subtitle of the post
  """
  subtitle: String!

  """
  Summary to appear in list on category page
  """
  summary: String!

  """
  Title of the post
  """
  title: String!
}

type Query {
  """
  Fetches a Post by ID
  """
  postById(
    """
    ID to query
    """
    id: ID!

    """
    whether to include categories and posts that have not yet been published
    """
    includeUnpublished: Boolean = false
  ): Post

  """
  Fetches a Post by combining its URL slug and its parent's URL slug
  """
  postByParentAndOwnSlug(
    """
    whether to include posts that have not yet been published
    """
    includeUnpublished: Boolean = false

    """
    the slug of the post's parent
    """
    parentSlug: String!

    """
    the post's slug
    """
    postSlug: String!
  ): Post

  """
  Fetches a post by its URL slug.
  """
  postBySlug(
    """
    whether to include posts that have not yet been published
    """
    includeUnpublished: Boolean = false

    """
    the slug to look up
    """
    slug: String!
  ): Post

  """
  Fetches all Posts that belong to a parent Post
  """
  postsByParent(
    """
    whether to include posts that have not yet been published
    """
    includeUnpublished: Boolean = false

    """
    ID of the post to query
    """
    postId: ID!
  ): [Post!]

  """
  Fetches a user by ID
  """
  userById(
    """
    ID to query
    """
    id: ID!
  ): User

  """
  Fetches a user by login
  """
  userByLogin(
    """
    login to look up
    """
    login: String!
  ): User
}

"""
Autogenerated input type of UpdatePost
"""
input UpdatePostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the post to update
  """
  id: ID!

  """
  The post to update
  """
  postAttributes: PostInput!
}

"""
Autogenerated return type of UpdatePost.
"""
type UpdatePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If non-empty, contains descriptions of errors that prevented the mutation.
  """
  errors: [String!]!

  """
  The post that was updated. Null if there were errors.
  """
  post: Post
}

"""
A user who maintains the website
"""
type User {
  """
  When this object was added to the database
  """
  createdAt: ISO8601DateTime!

  """
  Unique database ID
  """
  id: ID!

  """
  Username used for logging in
  """
  login: String

  """
  Full name as it should appear under posts
  """
  name: String

  """
  The posts created by this user
  """
  posts: [Post!]

  """
  When this object was last updated in the database
  """
  updatedAt: ISO8601DateTime!
}
